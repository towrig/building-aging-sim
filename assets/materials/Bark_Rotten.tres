[gd_resource type="ShaderMaterial" load_steps=19 format=2]

[ext_resource path="res://assets/textures/Bark_Pine_002_SD/Bark_Pine_normal.jpg" type="Texture" id=1]
[ext_resource path="res://assets/textures/Bark_Pine_002_SD/Bark_Pine_baseColor.jpg" type="Texture" id=2]
[ext_resource path="res://assets/textures/Bark_Pine_002_SD/Bark_Pine_roughness.jpg" type="Texture" id=3]
[ext_resource path="res://assets/textures/Bark_Pine_002_SD/Bark_Pine_ambientOcclusion.jpg" type="Texture" id=4]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 3 )
texture_type = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=2]

[sub_resource type="VisualShaderNodeTexture" id=3]
texture = ExtResource( 2 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 4 )

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 5.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 1.4

[sub_resource type="VisualShaderNodeColorOp" id=7]
operator = 7

[sub_resource type="VisualShaderNodeColorConstant" id=8]
constant = Color( 0.2, 0.47451, 0.0235294, 1 )

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = ExtResource( 1 )
texture_type = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=10]

[sub_resource type="VisualShaderNodeVectorCompose" id=11]

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=13]
constant = 1.4

[sub_resource type="VisualShader" id=14]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_12 : hint_albedo;
uniform sampler2D tex_frg_10 : hint_normal;
uniform sampler2D tex_frg_13;
uniform sampler2D tex_frg_2 : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// Texture:12
	vec4 tex_frg_12_read = texture(tex_frg_12, UV.xy);
	vec3 n_out12p0 = tex_frg_12_read.rgb;
	float n_out12p1 = tex_frg_12_read.a;

// Color:17
	vec3 n_out17p0 = vec3(0.200000, 0.474510, 0.023529);
	float n_out17p1 = 1.000000;

// ColorOp:16
	vec3 n_out16p0;
	{
		float base = n_out12p0.x;
		float blend = n_out17p0.x;
		if (base < 0.5) {
			n_out16p0.x = (base * (blend + 0.5));
		} else {
			n_out16p0.x = (1.0 - (1.0 - base) * (1.0 - (blend - 0.5)));
		}
	}
	{
		float base = n_out12p0.y;
		float blend = n_out17p0.y;
		if (base < 0.5) {
			n_out16p0.y = (base * (blend + 0.5));
		} else {
			n_out16p0.y = (1.0 - (1.0 - base) * (1.0 - (blend - 0.5)));
		}
	}
	{
		float base = n_out12p0.z;
		float blend = n_out17p0.z;
		if (base < 0.5) {
			n_out16p0.z = (base * (blend + 0.5));
		} else {
			n_out16p0.z = (1.0 - (1.0 - base) * (1.0 - (blend - 0.5)));
		}
	}

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, UV.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// VectorDecompose:11
	float n_out11p0 = n_out10p0.x;
	float n_out11p1 = n_out10p0.y;
	float n_out11p2 = n_out10p0.z;

// Scalar:15
	float n_out15p0 = 1.400000;

// ScalarOp:14
	float n_out14p0 = n_out11p1 * n_out15p0;

// Texture:13
	vec4 tex_frg_13_read = texture(tex_frg_13, UV.xy);
	vec3 n_out13p0 = tex_frg_13_read.rgb;
	float n_out13p1 = tex_frg_13_read.a;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorDecompose:3
	float n_out3p0 = n_out2p0.x;
	float n_out3p1 = n_out2p0.y;
	float n_out3p2 = n_out2p0.z;

// VectorCompose:4
	float n_in4p2 = 0.00000;
	vec3 n_out4p0 = vec3(n_out3p0, n_out3p1, n_in4p2);

// Scalar:9
	float n_out9p0 = 1.400000;

// ScalarOp:8
	float n_out8p0 = n_out3p2 * n_out9p0;

// Output:0
	ALBEDO = n_out16p0;
	ROUGHNESS = n_out14p0;
	AO = n_out13p1;
	NORMALMAP = n_out4p0;
	NORMALMAP_DEPTH = n_out8p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -543, -277.2 )
nodes/fragment/0/position = Vector2( 500, 100 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -420, 300 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( -100, 340 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( 220, 300 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( 220, 420 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( -100, 480 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -420, 60 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -80, 160 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -380, -220 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 160, -200 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 220, 140 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -60, 260 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -60, -60 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -200, 20 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 3, 1, 4, 1, 9, 0, 8, 1, 3, 2, 8, 0, 8, 0, 0, 9, 10, 0, 11, 0, 14, 0, 0, 3, 15, 0, 14, 1, 13, 1, 0, 6, 11, 1, 14, 0, 4, 0, 0, 8, 12, 0, 16, 0, 16, 0, 0, 0, 17, 0, 16, 1 )

[resource]
shader = SubResource( 14 )
